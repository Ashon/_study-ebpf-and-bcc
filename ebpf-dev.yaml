vmType: null
os: null
arch: null

images:
- location: "https://cloud-images.ubuntu.com/releases/24.04/release-20240423/ubuntu-24.04-server-cloudimg-amd64.img"
  arch: "x86_64"
  digest: "sha256:32a9d30d18803da72f5936cf2b7b9efcb4d0bb63c67933f17e3bdfd1751de3f3"
- location: "https://cloud-images.ubuntu.com/releases/24.04/release-20240423/ubuntu-24.04-server-cloudimg-arm64.img"
  arch: "aarch64"
  digest: "sha256:c841bac00925d3e6892d979798103a867931f255f28fefd9d5e07e3e22d0ef22"
# Fallback to the latest release image.
# Hint: run `limactl prune` to invalidate the cache
- location: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img"
  arch: "x86_64"
- location: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-arm64.img"
  arch: "aarch64"

cpus: 2
memory: 2GiB
disk: 20GiB
mounts:
- location: "~"
  writable: false
- location: "/Users/ashon/git/github/ashon/ebpf-on-mac/workspace"
  mountPoint: "/workspace"
  writable: true
- location: "/tmp/lima"
  writable: true

networks:
- lima: shared

ssh:
  localPort: 0
  loadDotSSHPubKeys: true

containerd:
  system: false
  user: false

provision:

# python build dependencies
- mode: dependency
  script: |
    #!/bin/bash
    set -eux -o pipefail

    apt update \
    && apt install --yes \
      git \
      build-essential \
      libssl-dev \
      zlib1g-dev \
      libbz2-dev \
      liblzma-dev \
      libreadline-dev \
      libsqlite3-dev \
      wget \
      curl \
      llvm \
      libncurses5-dev \
      libncursesw5-dev \
      xz-utils \
      tk-dev \
    && apt autoremove --yes --allow-remove-essential \
    && apt clean

- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail

    export PYENV_ROOT=/opt/pyenv
    if ! test -f $PYENV_ROOT/bin/pyenv; then
      curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
    fi

    if ! test -f $PYENV_ROOT; then
      sudo chown -R {{ .User }}:{{ .User }} $PYENV_ROOT

      if sudo grep -Fxq "export PYENV_ROOT=$PYENV_ROOT" /root/.bashrc; then
        echo "pyenv is already installed"
      else
        sudo echo "export PYENV_ROOT=$PYENV_ROOT" >> /root/.bashrc
        sudo echo "export PATH=\$PYENV_ROOT/shims:\$PYENV_ROOT/bin:\$PATH" >> /root/.bashrc
        sudo echo 'eval "$(pyenv init -)"' >> /root/.bashrc
        sudo echo 'eval "$(pyenv virtualenv-init -)"' >> /root/.bashrc
      fi
    fi

- mode: user
  script: |
    #!/bin/bash
    set -eux -o pipefail

    export PYENV_ROOT=/opt/pyenv
    if grep -Fxq "export PYENV_ROOT=$PYENV_ROOT" ~/.bashrc; then
      echo "pyenv is already installed"
    else
      echo "export PYENV_ROOT=$PYENV_ROOT" >> ~/.bashrc
      echo "export PATH=\$PYENV_ROOT/shims:\$PYENV_ROOT/bin:\$PATH" >> ~/.bashrc
      echo 'eval "$(pyenv init -)"' >> ~/.bashrc
      echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
    fi

- mode: user
  script: |
    #!/bin/bash
    set -eux -o pipefail

    command -v docker >/dev/null 2>&1 && exit 0

    if [ ! -e /etc/systemd/system/docker.socket.d/override.conf ]; then
      sudo mkdir -p /etc/systemd/system/docker.socket.d

      cat <<-EOF > /tmp/docker-socket-override.conf
      [Socket]
      SocketUser=$USER
    EOF

      sudo mv /tmp/docker-socket-override.conf /etc/systemd/system/docker.socket.d/override.conf
    fi

    export DEBIAN_FRONTEND=noninteractive
    curl -fsSL https://get.docker.com | sh

# INFO: rootless docker: ebpf cannot run on this mode
# - mode: user
#   script: |
#     #!/bin/bash
#     set -eux -o pipefail

#     systemctl disable --now docker
#     apt-get install -y uidmap
#     dockerd-rootless-setuptool.sh install
#     docker context use rootless

probes:

# check pyenv is installed
- mode: readiness
  description: pyenv to be installed
  script: |
    #!/bin/bash
    set -eux -o pipefail

    if ! timeout 30s bash -c "until test -f /opt/pyenv/bin/pyenv >/dev/null 2>&1; do sleep 1; done"; then
      echo >&2 "pyenv is not installed yet"
      exit 1
    fi
  hint: See "/var/log/cloud-init-output.log". in the guest

# check docker is installed
- mode: readiness
  description: docker to be installed
  script: |
    #!/bin/bash
    set -eux -o pipefail

    if ! timeout 30s bash -c "until command -v docker >/dev/null 2>&1; do sleep 1; done"; then
      echo >&2 "docker is not installed yet"
      exit 1
    fi
  hint: See "/var/log/cloud-init-output.log". in the guest

# INFO: for rootless docker
# - script: |
#     #!/bin/bash
#     set -eux -o pipefail

#     if ! timeout 30s bash -c "until pgrep rootlesskit; do sleep 3; done"; then
#       echo >&2 "rootlesskit (used by rootless docker) is not running"
#       exit 1
#     fi
